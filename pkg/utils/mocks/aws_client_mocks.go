// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/configuration-anomaly-detection/pkg/cloudclient/aws/client (interfaces: AwsClient,BuilderIface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sts "github.com/aws/aws-sdk-go/service/sts"
	gomock "github.com/golang/mock/gomock"
	awsclient "github.com/openshift/configuration-anomaly-detection/pkg/cloudclient/aws/client"
)

// MockAwsClient is a mock of AwsClient interface.
type MockAwsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAwsClientMockRecorder
}

// MockAwsClientMockRecorder is the mock recorder for MockAwsClient.
type MockAwsClientMockRecorder struct {
	mock *MockAwsClient
}

// NewMockAwsClient creates a new mock instance.
func NewMockAwsClient(ctrl *gomock.Controller) *MockAwsClient {
	mock := &MockAwsClient{ctrl: ctrl}
	mock.recorder = &MockAwsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwsClient) EXPECT() *MockAwsClientMockRecorder {
	return m.recorder
}

// AssumeRole mocks base method.
func (m *MockAwsClient) AssumeRole(arg0 *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeRole", arg0)
	ret0, _ := ret[0].(*sts.AssumeRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockAwsClientMockRecorder) AssumeRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockAwsClient)(nil).AssumeRole), arg0)
}

// MockBuilderIface is a mock of BuilderIface interface.
type MockBuilderIface struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderIfaceMockRecorder
}

// MockBuilderIfaceMockRecorder is the mock recorder for MockBuilderIface.
type MockBuilderIfaceMockRecorder struct {
	mock *MockBuilderIface
}

// NewMockBuilderIface creates a new mock instance.
func NewMockBuilderIface(ctrl *gomock.Controller) *MockBuilderIface {
	mock := &MockBuilderIface{ctrl: ctrl}
	mock.recorder = &MockBuilderIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderIface) EXPECT() *MockBuilderIfaceMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockBuilderIface) New(arg0, arg1, arg2, arg3 string) (awsclient.AwsClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(awsclient.AwsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockBuilderIfaceMockRecorder) New(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockBuilderIface)(nil).New), arg0, arg1, arg2, arg3)
}
