// Code generated by MockGen. DO NOT EDIT.
// Source: aws.go

// Package awsmock is a generated GoMock package.
package awsmock

import (
	reflect "reflect"

	credentials "github.com/aws/aws-sdk-go/aws/credentials"
	cloudtrail "github.com/aws/aws-sdk-go/service/cloudtrail"
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	gomock "github.com/golang/mock/gomock"
	aws "github.com/openshift/configuration-anomaly-detection/pkg/aws"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AssumeRole mocks base method.
func (m *MockClient) AssumeRole(roleARN, region string) (*aws.SdkClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssumeRole", roleARN, region)
	ret0, _ := ret[0].(*aws.SdkClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockClientMockRecorder) AssumeRole(roleARN, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockClient)(nil).AssumeRole), roleARN, region)
}

// GetAWSCredentials mocks base method.
func (m *MockClient) GetAWSCredentials() credentials.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAWSCredentials")
	ret0, _ := ret[0].(credentials.Value)
	return ret0
}

// GetAWSCredentials indicates an expected call of GetAWSCredentials.
func (mr *MockClientMockRecorder) GetAWSCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAWSCredentials", reflect.TypeOf((*MockClient)(nil).GetAWSCredentials))
}

// GetSecurityGroupID mocks base method.
func (m *MockClient) GetSecurityGroupID(infraID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupID", infraID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupID indicates an expected call of GetSecurityGroupID.
func (mr *MockClientMockRecorder) GetSecurityGroupID(infraID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupID", reflect.TypeOf((*MockClient)(nil).GetSecurityGroupID), infraID)
}

// GetSubnetID mocks base method.
func (m *MockClient) GetSubnetID(infraID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetID", infraID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetID indicates an expected call of GetSubnetID.
func (mr *MockClientMockRecorder) GetSubnetID(infraID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetID", reflect.TypeOf((*MockClient)(nil).GetSubnetID), infraID)
}

// IsSubnetPrivate mocks base method.
func (m *MockClient) IsSubnetPrivate(subnet string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubnetPrivate", subnet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSubnetPrivate indicates an expected call of IsSubnetPrivate.
func (mr *MockClientMockRecorder) IsSubnetPrivate(subnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubnetPrivate", reflect.TypeOf((*MockClient)(nil).IsSubnetPrivate), subnet)
}

// ListNonRunningInstances mocks base method.
func (m *MockClient) ListNonRunningInstances(infraID string) ([]*ec2.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNonRunningInstances", infraID)
	ret0, _ := ret[0].([]*ec2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNonRunningInstances indicates an expected call of ListNonRunningInstances.
func (mr *MockClientMockRecorder) ListNonRunningInstances(infraID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNonRunningInstances", reflect.TypeOf((*MockClient)(nil).ListNonRunningInstances), infraID)
}

// ListRunningInstances mocks base method.
func (m *MockClient) ListRunningInstances(infraID string) ([]*ec2.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunningInstances", infraID)
	ret0, _ := ret[0].([]*ec2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunningInstances indicates an expected call of ListRunningInstances.
func (mr *MockClientMockRecorder) ListRunningInstances(infraID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunningInstances", reflect.TypeOf((*MockClient)(nil).ListRunningInstances), infraID)
}

// PollInstanceStopEventsFor mocks base method.
func (m *MockClient) PollInstanceStopEventsFor(instances []*ec2.Instance, retryTimes int) ([]*cloudtrail.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollInstanceStopEventsFor", instances, retryTimes)
	ret0, _ := ret[0].([]*cloudtrail.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollInstanceStopEventsFor indicates an expected call of PollInstanceStopEventsFor.
func (mr *MockClientMockRecorder) PollInstanceStopEventsFor(instances, retryTimes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollInstanceStopEventsFor", reflect.TypeOf((*MockClient)(nil).PollInstanceStopEventsFor), instances, retryTimes)
}
