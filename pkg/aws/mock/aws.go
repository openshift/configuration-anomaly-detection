// Code generated by MockGen. DO NOT EDIT.
// Source: aws.go
//
// Generated by this command:
//
//	mockgen -source=aws.go -package=awsmock -destination=mock/aws.go
//

// Package awsmock is a generated GoMock package.
package awsmock

import (
	context "context"
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go-v2/aws"
	cloudtrail "github.com/aws/aws-sdk-go-v2/service/cloudtrail"
	types "github.com/aws/aws-sdk-go-v2/service/cloudtrail/types"
	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	types0 "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	sts "github.com/aws/aws-sdk-go-v2/service/sts"
	gomock "go.uber.org/mock/gomock"
)

// MockEC2API is a mock of EC2API interface.
type MockEC2API struct {
	ctrl     *gomock.Controller
	recorder *MockEC2APIMockRecorder
	isgomock struct{}
}

// MockEC2APIMockRecorder is the mock recorder for MockEC2API.
type MockEC2APIMockRecorder struct {
	mock *MockEC2API
}

// NewMockEC2API creates a new mock instance.
func NewMockEC2API(ctrl *gomock.Controller) *MockEC2API {
	mock := &MockEC2API{ctrl: ctrl}
	mock.recorder = &MockEC2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEC2API) EXPECT() *MockEC2APIMockRecorder {
	return m.recorder
}

// DescribeInstances mocks base method.
func (m *MockEC2API) DescribeInstances(ctx context.Context, in *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstances", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances.
func (mr *MockEC2APIMockRecorder) DescribeInstances(ctx, in any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockEC2API)(nil).DescribeInstances), varargs...)
}

// DescribeRouteTables mocks base method.
func (m *MockEC2API) DescribeRouteTables(ctx context.Context, in *ec2.DescribeRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRouteTables", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeRouteTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRouteTables indicates an expected call of DescribeRouteTables.
func (mr *MockEC2APIMockRecorder) DescribeRouteTables(ctx, in any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRouteTables", reflect.TypeOf((*MockEC2API)(nil).DescribeRouteTables), varargs...)
}

// DescribeSecurityGroups mocks base method.
func (m *MockEC2API) DescribeSecurityGroups(ctx context.Context, in *ec2.DescribeSecurityGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSecurityGroups", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityGroups indicates an expected call of DescribeSecurityGroups.
func (mr *MockEC2APIMockRecorder) DescribeSecurityGroups(ctx, in any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityGroups", reflect.TypeOf((*MockEC2API)(nil).DescribeSecurityGroups), varargs...)
}

// DescribeSubnets mocks base method.
func (m *MockEC2API) DescribeSubnets(ctx context.Context, in *ec2.DescribeSubnetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSubnets", varargs...)
	ret0, _ := ret[0].(*ec2.DescribeSubnetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubnets indicates an expected call of DescribeSubnets.
func (mr *MockEC2APIMockRecorder) DescribeSubnets(ctx, in any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnets", reflect.TypeOf((*MockEC2API)(nil).DescribeSubnets), varargs...)
}

// MockCloudTrailAPI is a mock of CloudTrailAPI interface.
type MockCloudTrailAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudTrailAPIMockRecorder
	isgomock struct{}
}

// MockCloudTrailAPIMockRecorder is the mock recorder for MockCloudTrailAPI.
type MockCloudTrailAPIMockRecorder struct {
	mock *MockCloudTrailAPI
}

// NewMockCloudTrailAPI creates a new mock instance.
func NewMockCloudTrailAPI(ctrl *gomock.Controller) *MockCloudTrailAPI {
	mock := &MockCloudTrailAPI{ctrl: ctrl}
	mock.recorder = &MockCloudTrailAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudTrailAPI) EXPECT() *MockCloudTrailAPIMockRecorder {
	return m.recorder
}

// LookupEvents mocks base method.
func (m *MockCloudTrailAPI) LookupEvents(ctx context.Context, in *cloudtrail.LookupEventsInput, optFns ...func(*cloudtrail.Options)) (*cloudtrail.LookupEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookupEvents", varargs...)
	ret0, _ := ret[0].(*cloudtrail.LookupEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupEvents indicates an expected call of LookupEvents.
func (mr *MockCloudTrailAPIMockRecorder) LookupEvents(ctx, in any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEvents", reflect.TypeOf((*MockCloudTrailAPI)(nil).LookupEvents), varargs...)
}

// MockStsAPI is a mock of StsAPI interface.
type MockStsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockStsAPIMockRecorder
	isgomock struct{}
}

// MockStsAPIMockRecorder is the mock recorder for MockStsAPI.
type MockStsAPIMockRecorder struct {
	mock *MockStsAPI
}

// NewMockStsAPI creates a new mock instance.
func NewMockStsAPI(ctrl *gomock.Controller) *MockStsAPI {
	mock := &MockStsAPI{ctrl: ctrl}
	mock.recorder = &MockStsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStsAPI) EXPECT() *MockStsAPIMockRecorder {
	return m.recorder
}

// AssumeRole mocks base method.
func (m *MockStsAPI) AssumeRole(ctx context.Context, in *sts.AssumeRoleInput, optFns ...func(*sts.Options)) (*sts.AssumeRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssumeRole", varargs...)
	ret0, _ := ret[0].(*sts.AssumeRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssumeRole indicates an expected call of AssumeRole.
func (mr *MockStsAPIMockRecorder) AssumeRole(ctx, in any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssumeRole", reflect.TypeOf((*MockStsAPI)(nil).AssumeRole), varargs...)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetBaseConfig mocks base method.
func (m *MockClient) GetBaseConfig() *aws.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseConfig")
	ret0, _ := ret[0].(*aws.Config)
	return ret0
}

// GetBaseConfig indicates an expected call of GetBaseConfig.
func (mr *MockClientMockRecorder) GetBaseConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseConfig", reflect.TypeOf((*MockClient)(nil).GetBaseConfig))
}

// GetRouteTableForSubnet mocks base method.
func (m *MockClient) GetRouteTableForSubnet(subnetID string) (types0.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteTableForSubnet", subnetID)
	ret0, _ := ret[0].(types0.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteTableForSubnet indicates an expected call of GetRouteTableForSubnet.
func (mr *MockClientMockRecorder) GetRouteTableForSubnet(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteTableForSubnet", reflect.TypeOf((*MockClient)(nil).GetRouteTableForSubnet), subnetID)
}

// GetSecurityGroupID mocks base method.
func (m *MockClient) GetSecurityGroupID(infraID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupID", infraID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupID indicates an expected call of GetSecurityGroupID.
func (mr *MockClientMockRecorder) GetSecurityGroupID(infraID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupID", reflect.TypeOf((*MockClient)(nil).GetSecurityGroupID), infraID)
}

// GetSubnetID mocks base method.
func (m *MockClient) GetSubnetID(infraID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetID", infraID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetID indicates an expected call of GetSubnetID.
func (mr *MockClientMockRecorder) GetSubnetID(infraID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetID", reflect.TypeOf((*MockClient)(nil).GetSubnetID), infraID)
}

// IsSubnetPrivate mocks base method.
func (m *MockClient) IsSubnetPrivate(subnet string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubnetPrivate", subnet)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSubnetPrivate indicates an expected call of IsSubnetPrivate.
func (mr *MockClientMockRecorder) IsSubnetPrivate(subnet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubnetPrivate", reflect.TypeOf((*MockClient)(nil).IsSubnetPrivate), subnet)
}

// ListNonRunningInstances mocks base method.
func (m *MockClient) ListNonRunningInstances(infraID string) ([]types0.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNonRunningInstances", infraID)
	ret0, _ := ret[0].([]types0.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNonRunningInstances indicates an expected call of ListNonRunningInstances.
func (mr *MockClientMockRecorder) ListNonRunningInstances(infraID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNonRunningInstances", reflect.TypeOf((*MockClient)(nil).ListNonRunningInstances), infraID)
}

// ListRunningInstances mocks base method.
func (m *MockClient) ListRunningInstances(infraID string) ([]types0.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunningInstances", infraID)
	ret0, _ := ret[0].([]types0.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunningInstances indicates an expected call of ListRunningInstances.
func (mr *MockClientMockRecorder) ListRunningInstances(infraID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunningInstances", reflect.TypeOf((*MockClient)(nil).ListRunningInstances), infraID)
}

// PollInstanceStopEventsFor mocks base method.
func (m *MockClient) PollInstanceStopEventsFor(instances []types0.Instance, retryTimes int) ([]types.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollInstanceStopEventsFor", instances, retryTimes)
	ret0, _ := ret[0].([]types.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollInstanceStopEventsFor indicates an expected call of PollInstanceStopEventsFor.
func (mr *MockClientMockRecorder) PollInstanceStopEventsFor(instances, retryTimes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollInstanceStopEventsFor", reflect.TypeOf((*MockClient)(nil).PollInstanceStopEventsFor), instances, retryTimes)
}
